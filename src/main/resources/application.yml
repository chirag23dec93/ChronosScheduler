spring:
  application:
    name: chronos-scheduler
  
  datasource:
    # Default configuration for local development
    url: ${SPRING_DATASOURCE_URL:jdbc:mysql://localhost:3306/chronos_db?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true}
    username: ${SPRING_DATASOURCE_USERNAME:chronos_user1}
    password: ${SPRING_DATASOURCE_PASSWORD:StrongPassword123!}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 5
      idle-timeout: 300000
      connection-timeout: 20000
  
  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect

  # Flyway Configuration
  flyway:
    enabled: true
    baseline-on-migrate: true
    clean-disabled: false
    clean-on-validation-error: true
    repair-on-migrate: true
    locations: classpath:db/migration
  
  quartz:
    job-store-type: jdbc
    jdbc:
      initialize-schema: always
      platform: mysql
      schema: classpath:org/quartz/impl/jdbcjobstore/tables_mysql_innodb.sql
    scheduler-name: chronos-scheduler
    auto-startup: true
    startup-delay: 0s
    wait-for-jobs-to-complete-on-shutdown: true
    overwrite-existing-jobs: true
    properties:
      org.quartz.scheduler.instanceId: AUTO
      org.quartz.scheduler.instanceName: chronos-scheduler
      org.quartz.threadPool.class: org.quartz.simpl.SimpleThreadPool
      org.quartz.threadPool.threadCount: 10
      org.quartz.threadPool.threadPriority: 5
      org.quartz.jobStore.class: org.quartz.impl.jdbcjobstore.JobStoreTX
      org.quartz.jobStore.driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
      org.quartz.jobStore.useProperties: false
      org.quartz.jobStore.tablePrefix: QRTZ_
      org.quartz.jobStore.misfireThreshold: 60000
      org.quartz.jobStore.isClustered: false

  # Management and Metrics Configuration
  management:
    endpoints:
      web:
        exposure:
          include: '*'
    endpoint:
      health:
        show-details: always
  
  mail:
    host: ${SMTP_HOST:mailhog}
    port: ${SMTP_PORT:1025}
    username: ${SMTP_USERNAME:}
    password: ${SMTP_PASSWORD:}
    properties:
      mail.smtp.auth: false
      mail.smtp.starttls.enable: false

  thymeleaf:
    prefix: classpath:/templates/
    suffix: .html
    mode: HTML
    encoding: UTF-8
    cache: false
  
logging:
  level:
    root: INFO
    com.chronos: DEBUG
    org.springframework.security: INFO
    org.hibernate.SQL: INFO

  
server:
  port: 8080
  servlet:
    context-path: /
  error:
    include-message: always
    include-binding-errors: always
    include-stacktrace: never
    include-exception: false

management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus,metrics,jobstats,cluster
  endpoint:
    health:
      show-details: when_authorized
      probes:
        enabled: true
    prometheus:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}
    export:
      prometheus:
        enabled: true

springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
    operationsSorter: method

app:
  security:
    jwt:
      secret-key: ${JWT_SECRET_KEY:ZDFmMjNhNGI1YzZkN2U4ZjlnMGgxaTJqM2s0bDVtNm43bzh1OXAxcTJyM3M0dDV2Nng3eThpOWowYTFiMmMzZDRlNWY2Zw==}
      expiration: 86400000 # 24 hours
      refresh-token:
        expiration: 604800000 # 7 days
  
  job:
    max-concurrent-executions: 50
    default-retry-attempts: 3
    default-backoff-seconds: 60
    cleanup:
      enabled: true
      retention-days: 30
  
  notification:
    email:
      enabled: true
      from: chronos@chronos-scheduler.com
      admin-email: chiragthearyan@gmail.com
      templates:
        job-success: mail/job-success
        job-failure: mail/job-failure
    webhook:
      enabled: true
      timeout: 5000
      max-attempts: 3
      default-endpoints:
        - name: webhook-site
          url: ${WEBHOOK_URL:https://webhook.site/your-unique-url}
          events: [JOB_COMPLETED, JOB_FAILED, MAX_RETRIES_EXCEEDED]
        - name: slack
          url: ${SLACK_WEBHOOK_URL:}
          events: [JOB_FAILED, MAX_RETRIES_EXCEEDED]

---
spring:
  config:
    activate:
      on-profile: docker
  
  data:
    redis:
      enabled: false
  
  rabbitmq:
    enabled: false

management:
  health:
    redis:
      enabled: false
    rabbit:
      enabled: false

chronos:
  database:
    pool:
      url: jdbc:mysql://mysql:3306/chronos_db?useSSL=false&allowPublicKeyRetrieval=true
      username: chronos_user1
      password: StrongPassword123!
      maxPoolSize: 10
      minIdle: 5
      idleTimeoutMs: 300000
      connectionTimeoutMs: 20000
      maxLifetimeMs: 1800000
      validationTimeoutMs: 5000
      leakDetectionThresholdMs: 60000
  
  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
  
  flyway:
    enabled: true
    baseline-on-migrate: true
    locations: classpath:db/migration
  
  quartz:
    jdbc:
      initialize-schema: always

---
spring:
  config:
    activate:
      on-profile: test
  
  datasource:
    url: jdbc:tc:postgresql:16:///chronos
  
  quartz:
    jdbc:
      initialize-schema: always

---
spring:
  config:
    activate:
      on-profile: prod
  
  quartz:
    properties:
      org.quartz.jobStore.isClustered: true
