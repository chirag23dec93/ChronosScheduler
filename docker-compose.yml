version: '3.8'

services:
  app:
    build: .
    container_name: chronos-app
    depends_on:
      mysql:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/chronos_db
      - SPRING_DATASOURCE_USERNAME=chronos_user1
      - SPRING_DATASOURCE_PASSWORD=StrongPassword123!
      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=com.mysql.cj.jdbc.Driver
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_KAFKA_CONSUMER_GROUP_ID=chronos-consumer-group
      - SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET=earliest
    ports:
      - "8080:8080"
    volumes:
      - chronos_test:/app/test
    user: "1000:1000"

  mysql:
    image: mysql:8.0
    container_name: chronos-mysql
    environment:
      MYSQL_DATABASE: chronos_db
      MYSQL_USER: chronos_user1
      MYSQL_PASSWORD: StrongPassword123!
      MYSQL_ROOT_PASSWORD: root
    ports:
      - "3307:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 5s
      retries: 10
    volumes:
      - mysql_data:/var/lib/mysql

  mailhog:
    image: mailhog/mailhog
    container_name: chronos-mailhog
    ports:
      - "1025:1025"
      - "8025:8025"

  redis:
    image: redis:7.0-alpine
    container_name: chronos-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

  prometheus:
    build:
      context: .
      dockerfile: Dockerfile.prometheus
    container_name: chronos-prometheus
    volumes:
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    depends_on:
      - app

  grafana:
    build:
      context: .
      dockerfile: Dockerfile.grafana
    container_name: chronos-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=chirag
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: chronos-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: chronos-kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    ports:
      - "29092:29092"
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka/data

configs:
  prometheus_config:
    file: ./prometheus.yml

networks:
  default:
    driver: bridge

volumes:
  mysql_data:
  prometheus_data:
  chronos_test:
  grafana_data:
  redis_data:
  kafka_data:
  zookeeper_data:
  zookeeper_logs:

